!function(r){var t={};function n(e){if(t[e])return t[e].exports;var i=t[e]={i:e,l:!1,exports:{}};return r[e].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=r,n.c=t,n.d=function(r,t,e){n.o(r,t)||Object.defineProperty(r,t,{enumerable:!0,get:e})},n.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},n.t=function(r,t){if(1&t&&(r=n(r)),8&t)return r;if(4&t&&"object"==typeof r&&r&&r.__esModule)return r;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:r}),2&t&&"string"!=typeof r)for(var i in r)n.d(e,i,function(t){return r[t]}.bind(null,i));return e},n.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return n.d(t,"a",t),t},n.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)},n.p="",n(n.s=5)}([function(r,t,n){"use strict";var e=n(1),i=n(7),o=n(8),a=n(10),s=5;function u(r,t){for(var n=new Array(r.length-1),e=1;e<r.length;++e)for(var i=n[e-1]=new Array(r.length-1),o=0,a=0;o<r.length;++o)o!==t&&(i[a++]=r[e][o]);return n}function c(r){return 1&r?"-":""}function l(r){if(1===r.length)return r[0];if(2===r.length)return["sum(",r[0],",",r[1],")"].join("");var t=r.length>>1;return["sum(",l(r.slice(0,t)),",",l(r.slice(t)),")"].join("")}function f(r){if(2===r.length)return[["sum(prod(",r[0][0],",",r[1][1],"),prod(-",r[0][1],",",r[1][0],"))"].join("")];for(var t=[],n=0;n<r.length;++n)t.push(["scale(",l(f(u(r,n))),",",c(n),r[0][n],")"].join(""));return t}function h(r){for(var t=[],n=[],s=function(r){for(var t=new Array(r),n=0;n<r;++n){t[n]=new Array(r);for(var e=0;e<r;++e)t[n][e]=["m",e,"[",r-n-1,"]"].join("")}return t}(r),c=[],h=0;h<r;++h)0==(1&h)?t.push.apply(t,f(u(s,h))):n.push.apply(n,f(u(s,h))),c.push("m"+h);var v=l(t),p=l(n),d="orientation"+r+"Exact",g=["function ",d,"(",c.join(),"){var p=",v,",n=",p,",d=sub(p,n);return d[d.length-1];};return ",d].join("");return new Function("sum","prod","scale","sub",g)(i,e,o,a)}var v=h(3),p=h(4),d=[function(){return 0},function(){return 0},function(r,t){return t[0]-r[0]},function(r,t,n){var e,i=(r[1]-n[1])*(t[0]-n[0]),o=(r[0]-n[0])*(t[1]-n[1]),a=i-o;if(i>0){if(o<=0)return a;e=i+o}else{if(!(i<0))return a;if(o>=0)return a;e=-(i+o)}var s=3.3306690738754716e-16*e;return a>=s||a<=-s?a:v(r,t,n)},function(r,t,n,e){var i=r[0]-e[0],o=t[0]-e[0],a=n[0]-e[0],s=r[1]-e[1],u=t[1]-e[1],c=n[1]-e[1],l=r[2]-e[2],f=t[2]-e[2],h=n[2]-e[2],v=o*c,d=a*u,g=a*s,w=i*c,m=i*u,y=o*s,E=l*(v-d)+f*(g-w)+h*(m-y),x=7.771561172376103e-16*((Math.abs(v)+Math.abs(d))*Math.abs(l)+(Math.abs(g)+Math.abs(w))*Math.abs(f)+(Math.abs(m)+Math.abs(y))*Math.abs(h));return E>x||-E>x?E:p(r,t,n,e)}];!function(){for(;d.length<=s;)d.push(h(d.length));for(var t=[],n=["slow"],e=0;e<=s;++e)t.push("a"+e),n.push("o"+e);var i=["function getOrientation(",t.join(),"){switch(arguments.length){case 0:case 1:return 0;"];for(e=2;e<=s;++e)i.push("case ",e,":return o",e,"(",t.slice(0,e).join(),");");i.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation"),n.push(i.join(""));var o=Function.apply(void 0,n);for(r.exports=o.apply(void 0,[function(r){var t=d[r.length];return t||(t=d[r.length]=h(r.length)),t.apply(void 0,r)}].concat(d)),e=0;e<=s;++e)r.exports[e]=d[e]}()},function(r,t,n){"use strict";r.exports=function(r,t,n){var i=r*t,o=e*r,a=o-(o-r),s=r-a,u=e*t,c=u-(u-t),l=t-c,f=s*l-(i-a*c-s*c-a*l);if(n)return n[0]=f,n[1]=i,n;return[f,i]};var e=+(Math.pow(2,27)+1)},function(r,t,n){"use strict";var e=n(3),i=n(4),o=n(11);r.exports=function(r){var t=r.length;if(0===t)return[];if(1===t)return[[0]];var n=r[0].length;if(0===n)return[];if(1===n)return e(r);if(2===n)return i(r);return o(r,n)}},function(r,t,n){"use strict";r.exports=function(r){for(var t=0,n=0,e=1;e<r.length;++e)r[e][0]<r[t][0]&&(t=e),r[e][0]>r[n][0]&&(n=e);return t<n?[[t],[n]]:t>n?[[n],[t]]:[[t]]}},function(r,t,n){"use strict";r.exports=function(r){var t=e(r),n=t.length;if(n<=2)return[];for(var i=new Array(n),o=t[n-1],a=0;a<n;++a){var s=t[a];i[a]=[o,s],o=s}return i};var e=n(6)},function(r,t,n){const{Plane:e,Vector3:i,Line3:o,Matrix4:a,Math:s,Box3Helper:u}=THREE,c=(n(2),n(17));function l(r,t){const n=function(r,t=new i(0,0,1)){const n=r.clone().normalize().cross(t).normalize(),e=Math.acos(r.clone().normalize().dot(t));return(new THREE.Quaternion).setFromAxisAngle(n,e)}(t,new i(0,0,1)),e=[];r.forEach(r=>{e.push(r.clone().applyQuaternion(n))});const o=[];return new c(e.map(r=>[r.x,r.y])).minAreaEnclosingRectangle().vertices.map(r=>new i(...r,e[0].z)).forEach(r=>{o.push(r.clone().applyQuaternion(n.clone().inverse()))}),o}const f=[512,512,192],h=[[0,0,0],[f[0],f[1],f[2]]];let v,p,d,g=new i(0,0,1),w=new i(100,100,100),m=(new e).setFromNormalAndCoplanarPoint(g,w);const y=document.getElementById("viewport");function E(){console.log("plane",m),d=[],p=[new i(h[0][0],h[0][1],h[0][2]),new i(h[1][0],h[0][1],h[0][2]),new i(h[1][0],h[1][1],h[0][2]),new i(h[0][0],h[1][1],h[0][2]),new i(h[0][0],h[0][1],h[1][2]),new i(h[1][0],h[0][1],h[1][2]),new i(h[1][0],h[1][1],h[1][2]),new i(h[0][0],h[1][1],h[1][2])],v=[new o(p[0],p[1]),new o(p[1],p[2]),new o(p[2],p[3]),new o(p[3],p[0]),new o(p[4],p[5]),new o(p[5],p[6]),new o(p[6],p[7]),new o(p[7],p[4]),new o(p[0],p[4]),new o(p[1],p[5]),new o(p[2],p[6]),new o(p[3],p[7])];for(let r=0;r<v.length;r++){const t=v[r],n=m.intersectLine(t,new i);if(n){d.find(r=>r.equals(n))||(console.log("intersected",r),d.push(n))}}console.log("intersections:",d)}function x(r,t,n=16777215){t.forEach((e,i)=>{const o=new THREE.Geometry;for(let i=0;i<t.length;i++){o.vertices.push(e),o.vertices.push(t[i]),material=new THREE.LineBasicMaterial({color:n,linewidth:5});const a=new THREE.Line(o,material);r.add(a)}})}var b=new THREE.WebGLRenderer({canvas:y}),M=800,A=800,T=new THREE.PerspectiveCamera(600,M/A,1,1e3);function j(){var r=new THREE.Scene;b.setSize(M,A),document.body.appendChild(b.domElement);let t=new THREE.Geometry;t.vertices.push(p[0]),material=new THREE.PointsMaterial({color:16777215,size:5}),r.add(new THREE.Points(t,material)),v.forEach(t=>{const n=new THREE.Geometry;n.vertices.push(t.start),n.vertices.push(t.end),material=new THREE.LineBasicMaterial({color:255,linewidth:5});const e=new THREE.Line(n,material);r.add(e)}),x(r,d);const n=l(d,g.clone());x(r,n,65535),(t=new THREE.Geometry).vertices.push(p[0]),t.vertices.push(p[1]),material=new THREE.LineBasicMaterial({color:16711680,linewidth:10}),r.add(new THREE.Line(t,material)),(t=new THREE.Geometry).vertices.push(p[0]),t.vertices.push(p[3]),material=new THREE.LineBasicMaterial({color:65280,linewidth:10}),r.add(new THREE.Line(t,material)),(t=new THREE.Geometry).vertices.push(p[0]),t.vertices.push(p[4]),material=new THREE.LineBasicMaterial({color:39423,linewidth:10}),r.add(new THREE.Line(t,material));var e=function(){requestAnimationFrame(e),b.render(r,T)};e()}T.position.z=M,T.position.y=-250,T.position.x=250,T.lookAt(new i(0,0,0)),E(),j(),document.getElementById("planex").addEventListener("input",r=>{const t=parseFloat(r.target.value,10);m.setComponents(t,m.normal.y,m.normal.z,m.constant),E(),j()}),document.getElementById("planey").addEventListener("input",r=>{const t=parseFloat(r.target.value,10);m.setComponents(m.normal.x,t,m.normal.z,m.constant),E(),j()}),document.getElementById("planez").addEventListener("input",r=>{const t=parseFloat(r.target.value,10);m.setComponents(m.normal.x,m.normal.y,t,m.constant),E(),j()}),document.getElementById("const").addEventListener("click",r=>{const t=s.degToRad(10);g.applyMatrix4((new a).makeRotationY(t)),m=(new e).setFromNormalAndCoplanarPoint(g,w),E(),j()}),document.getElementById("translate").addEventListener("click",r=>{s.degToRad(10);w=function(r,t,n){return(new THREE.Vector3).addVectors(r,t.normalize().multiplyScalar(n))}(w,g,10),m=(new e).setFromNormalAndCoplanarPoint(g,w),E(),j()}),document.getElementById("camera").addEventListener("click",r=>{const t=s.degToRad(20);T.rotation.z+=t,j()})},function(r,t,n){"use strict";r.exports=function(r){var t=r.length;if(t<3){for(var n=new Array(t),i=0;i<t;++i)n[i]=i;return 2===t&&r[0][0]===r[1][0]&&r[0][1]===r[1][1]?[0]:n}for(var o=new Array(t),i=0;i<t;++i)o[i]=i;o.sort(function(t,n){var e=r[t][0]-r[n][0];return e||r[t][1]-r[n][1]});for(var a=[o[0],o[1]],s=[o[0],o[1]],i=2;i<t;++i){for(var u=o[i],c=r[u],l=a.length;l>1&&e(r[a[l-2]],r[a[l-1]],c)<=0;)l-=1,a.pop();for(a.push(u),l=s.length;l>1&&e(r[s[l-2]],r[s[l-1]],c)>=0;)l-=1,s.pop();s.push(u)}for(var n=new Array(s.length+a.length-2),f=0,i=0,h=a.length;i<h;++i)n[f++]=a[i];for(var v=s.length-2;v>0;--v)n[f++]=s[v];return n};var e=n(0)[3]},function(r,t,n){"use strict";r.exports=function(r,t){var n=0|r.length,e=0|t.length;if(1===n&&1===e)return function(r,t){var n=r+t,e=n-r,i=r-(n-e)+(t-e);if(i)return[i,n];return[n]}(r[0],t[0]);var i,o,a=new Array(n+e),s=0,u=0,c=0,l=Math.abs,f=r[u],h=l(f),v=t[c],p=l(v);h<p?(o=f,(u+=1)<n&&(f=r[u],h=l(f))):(o=v,(c+=1)<e&&(v=t[c],p=l(v)));u<n&&h<p||c>=e?(i=f,(u+=1)<n&&(f=r[u],h=l(f))):(i=v,(c+=1)<e&&(v=t[c],p=l(v)));var d,g,w=i+o,m=w-i,y=o-m,E=y,x=w;for(;u<n&&c<e;)h<p?(i=f,(u+=1)<n&&(f=r[u],h=l(f))):(i=v,(c+=1)<e&&(v=t[c],p=l(v))),(y=(o=E)-(m=(w=i+o)-i))&&(a[s++]=y),E=x-((d=x+w)-(g=d-x))+(w-g),x=d;for(;u<n;)(y=(o=E)-(m=(w=(i=f)+o)-i))&&(a[s++]=y),E=x-((d=x+w)-(g=d-x))+(w-g),x=d,(u+=1)<n&&(f=r[u]);for(;c<e;)(y=(o=E)-(m=(w=(i=v)+o)-i))&&(a[s++]=y),E=x-((d=x+w)-(g=d-x))+(w-g),x=d,(c+=1)<e&&(v=t[c]);E&&(a[s++]=E);x&&(a[s++]=x);s||(a[s++]=0);return a.length=s,a}},function(r,t,n){"use strict";var e=n(1),i=n(9);r.exports=function(r,t){var n=r.length;if(1===n){var o=e(r[0],t);return o[0]?o:[o[1]]}var a=new Array(2*n),s=[.1,.1],u=[.1,.1],c=0;e(r[0],t,s),s[0]&&(a[c++]=s[0]);for(var l=1;l<n;++l){e(r[l],t,u);var f=s[1];i(f,u[0],s),s[0]&&(a[c++]=s[0]);var h=u[1],v=s[1],p=h+v,d=p-h,g=v-d;s[1]=p,g&&(a[c++]=g)}s[1]&&(a[c++]=s[1]);0===c&&(a[c++]=0);return a.length=c,a}},function(r,t,n){"use strict";r.exports=function(r,t,n){var e=r+t,i=e-r,o=t-i,a=r-(e-i);if(n)return n[0]=a+o,n[1]=e,n;return[a+o,e]}},function(r,t,n){"use strict";r.exports=function(r,t){var n=0|r.length,e=0|t.length;if(1===n&&1===e)return function(r,t){var n=r+t,e=n-r,i=r-(n-e)+(t-e);if(i)return[i,n];return[n]}(r[0],-t[0]);var i,o,a=new Array(n+e),s=0,u=0,c=0,l=Math.abs,f=r[u],h=l(f),v=-t[c],p=l(v);h<p?(o=f,(u+=1)<n&&(f=r[u],h=l(f))):(o=v,(c+=1)<e&&(v=-t[c],p=l(v)));u<n&&h<p||c>=e?(i=f,(u+=1)<n&&(f=r[u],h=l(f))):(i=v,(c+=1)<e&&(v=-t[c],p=l(v)));var d,g,w=i+o,m=w-i,y=o-m,E=y,x=w;for(;u<n&&c<e;)h<p?(i=f,(u+=1)<n&&(f=r[u],h=l(f))):(i=v,(c+=1)<e&&(v=-t[c],p=l(v))),(y=(o=E)-(m=(w=i+o)-i))&&(a[s++]=y),E=x-((d=x+w)-(g=d-x))+(w-g),x=d;for(;u<n;)(y=(o=E)-(m=(w=(i=f)+o)-i))&&(a[s++]=y),E=x-((d=x+w)-(g=d-x))+(w-g),x=d,(u+=1)<n&&(f=r[u]);for(;c<e;)(y=(o=E)-(m=(w=(i=v)+o)-i))&&(a[s++]=y),E=x-((d=x+w)-(g=d-x))+(w-g),x=d,(c+=1)<e&&(v=-t[c]);E&&(a[s++]=E);x&&(a[s++]=x);s||(a[s++]=0);return a.length=s,a}},function(r,t,n){"use strict";r.exports=function(r,t){try{return e(r,!0)}catch(s){var n=i(r);if(n.length<=t)return[];var o=function(r,t){for(var n=r.length,e=new Array(n),i=0;i<t.length;++i)e[i]=r[t[i]];for(var o=t.length,i=0;i<n;++i)t.indexOf(i)<0&&(e[o++]=r[i]);return e}(r,n),a=e(o,!0);return function(r,t){for(var n=r.length,e=t.length,i=0;i<n;++i)for(var o=r[i],a=0;a<o.length;++a){var s=o[a];if(s<e)o[a]=t[s];else{s-=e;for(var u=0;u<e;++u)s>=t[u]&&(s+=1);o[a]=s}}return r}(a,n)}};var e=n(12),i=n(16)},function(r,t,n){"use strict";r.exports=function(r,t){var n=r.length;if(0===n)throw new Error("Must have at least d+1 points");var i=r[0].length;if(n<=i)throw new Error("Must input at least d+1 points");var a=r.slice(0,i+1),s=e.apply(void 0,a);if(0===s)throw new Error("Input not in general position");for(var u=new Array(i+1),l=0;l<=i;++l)u[l]=l;s<0&&(u[0]=1,u[1]=0);for(var f=new o(u,new Array(i+1),!1),h=f.adjacent,v=new Array(i+2),l=0;l<=i;++l){for(var p=u.slice(),d=0;d<=i;++d)d===l&&(p[d]=-1);var g=p[0];p[0]=p[1],p[1]=g;var w=new o(p,new Array(i+1),!0);h[l]=w,v[l]=w}v[i+1]=f;for(var l=0;l<=i;++l)for(var p=h[l].vertices,m=h[l].adjacent,d=0;d<=i;++d){var y=p[d];if(y<0)m[d]=f;else for(var E=0;E<=i;++E)h[E].vertices.indexOf(y)<0&&(m[d]=h[E])}for(var x=new c(i,a,v),b=!!t,l=i+1;l<n;++l)x.insert(r[l],b);return x.boundary()};var e=n(0),i=n(13).compareCells;function o(r,t,n){this.vertices=r,this.adjacent=t,this.boundary=n,this.lastVisited=-1}function a(r,t,n){this.vertices=r,this.cell=t,this.index=n}function s(r,t){return i(r.vertices,t.vertices)}o.prototype.flip=function(){var r=this.vertices[0];this.vertices[0]=this.vertices[1],this.vertices[1]=r;var t=this.adjacent[0];this.adjacent[0]=this.adjacent[1],this.adjacent[1]=t};var u=[];function c(r,t,n){this.dimension=r,this.vertices=t,this.simplices=n,this.interior=n.filter(function(r){return!r.boundary}),this.tuple=new Array(r+1);for(var i=0;i<=r;++i)this.tuple[i]=this.vertices[i];var o=u[r];o||(o=u[r]=function(r){for(var t=["function orient(){var tuple=this.tuple;return test("],n=0;n<=r;++n)n>0&&t.push(","),t.push("tuple[",n,"]");t.push(")}return orient");var i=new Function("test",t.join("")),o=e[r+1];return o||(o=e),i(o)}(r)),this.orient=o}var l=c.prototype;l.handleBoundaryDegeneracy=function(r,t){var n=this.dimension,e=this.vertices.length-1,i=this.tuple,o=this.vertices,a=[r];for(r.lastVisited=-e;a.length>0;){(r=a.pop()).vertices;for(var s=r.adjacent,u=0;u<=n;++u){var c=s[u];if(c.boundary&&!(c.lastVisited<=-e)){for(var l=c.vertices,f=0;f<=n;++f){var h=l[f];i[f]=h<0?t:o[h]}var v=this.orient();if(v>0)return c;c.lastVisited=-e,0===v&&a.push(c)}}}return null},l.walk=function(r,t){var n=this.vertices.length-1,e=this.dimension,i=this.vertices,o=this.tuple,a=t?this.interior.length*Math.random()|0:this.interior.length-1,s=this.interior[a];r:for(;!s.boundary;){for(var u=s.vertices,c=s.adjacent,l=0;l<=e;++l)o[l]=i[u[l]];s.lastVisited=n;for(l=0;l<=e;++l){var f=c[l];if(!(f.lastVisited>=n)){var h=o[l];o[l]=r;var v=this.orient();if(o[l]=h,v<0){s=f;continue r}f.boundary?f.lastVisited=-n:f.lastVisited=n}}return}return s},l.addPeaks=function(r,t){var n=this.vertices.length-1,e=this.dimension,i=this.vertices,u=this.tuple,c=this.interior,l=this.simplices,f=[t];t.lastVisited=n,t.vertices[t.vertices.indexOf(-1)]=n,t.boundary=!1,c.push(t);for(var h=[];f.length>0;){var v=(t=f.pop()).vertices,p=t.adjacent,d=v.indexOf(n);if(!(d<0))for(var g=0;g<=e;++g)if(g!==d){var w=p[g];if(w.boundary&&!(w.lastVisited>=n)){var m=w.vertices;if(w.lastVisited!==-n){for(var y=0,E=0;E<=e;++E)m[E]<0?(y=E,u[E]=r):u[E]=i[m[E]];if(this.orient()>0){m[y]=n,w.boundary=!1,c.push(w),f.push(w),w.lastVisited=n;continue}w.lastVisited=-n}var x=w.adjacent,b=v.slice(),M=p.slice(),A=new o(b,M,!0);l.push(A);var T=x.indexOf(t);if(!(T<0)){x[T]=A,M[d]=w,b[g]=-1,M[g]=t,p[g]=A,A.flip();for(E=0;E<=e;++E){var j=b[E];if(!(j<0||j===n)){for(var R=new Array(e-1),H=0,k=0;k<=e;++k){var V=b[k];V<0||k===E||(R[H++]=V)}h.push(new a(R,A,E))}}}}}}h.sort(s);for(g=0;g+1<h.length;g+=2){var L=h[g],P=h[g+1],B=L.index,C=P.index;B<0||C<0||(L.cell.adjacent[L.index]=P.cell,P.cell.adjacent[P.index]=L.cell)}},l.insert=function(r,t){var n=this.vertices;n.push(r);var e=this.walk(r,t);if(e){for(var i=this.dimension,o=this.tuple,a=0;a<=i;++a){var s=e.vertices[a];o[a]=s<0?r:n[s]}var u=this.orient(o);u<0||(0!==u||(e=this.handleBoundaryDegeneracy(e,r)))&&this.addPeaks(r,e)}},l.boundary=function(){for(var r=this.dimension,t=[],n=this.simplices,e=n.length,i=0;i<e;++i){var o=n[i];if(o.boundary){for(var a=new Array(r),s=o.vertices,u=0,c=0,l=0;l<=r;++l)s[l]>=0?a[u++]=s[l]:c=1&l;if(c===(1&r)){var f=a[0];a[0]=a[1],a[1]=f}t.push(a)}}return t}},function(r,t,n){"use strict";"use restrict";var e=n(14),i=n(15);function o(r,t){var n=r.length,e=r.length-t.length,i=Math.min;if(e)return e;switch(n){case 0:return 0;case 1:return r[0]-t[0];case 2:return(s=r[0]+r[1]-t[0]-t[1])||i(r[0],r[1])-i(t[0],t[1]);case 3:var o=r[0]+r[1],a=t[0]+t[1];if(s=o+r[2]-(a+t[2]))return s;var s,u=i(r[0],r[1]),c=i(t[0],t[1]);return(s=i(u,r[2])-i(c,t[2]))||i(u+r[2],o)-i(c+t[2],a);default:var l=r.slice(0);l.sort();var f=t.slice(0);f.sort();for(var h=0;h<n;++h)if(e=l[h]-f[h])return e;return 0}}function a(r,t){return o(r[0],t[0])}function s(r,t){if(t){for(var n=r.length,e=new Array(n),i=0;i<n;++i)e[i]=[r[i],t[i]];e.sort(a);for(i=0;i<n;++i)r[i]=e[i][0],t[i]=e[i][1];return r}return r.sort(o),r}function u(r){if(0===r.length)return[];for(var t=1,n=r.length,e=1;e<n;++e){var i=r[e];if(o(i,r[e-1])){if(e===t){t++;continue}r[t++]=i}}return r.length=t,r}function c(r,t){for(var n=0,e=r.length-1,i=-1;n<=e;){var a=n+e>>1,s=o(r[a],t);s<=0?(0===s&&(i=a),n=a+1):s>0&&(e=a-1)}return i}function l(r,t){for(var n=new Array(r.length),i=0,a=n.length;i<a;++i)n[i]=[];for(var s=[],u=(i=0,t.length);i<u;++i)for(var l=t[i],f=l.length,h=1,v=1<<f;h<v;++h){s.length=e.popCount(h);for(var p=0,d=0;d<f;++d)h&1<<d&&(s[p++]=l[d]);var g=c(r,s);if(!(g<0))for(;n[g++].push(i),!(g>=r.length||0!==o(r[g],s)););}return n}function f(r,t){if(t<0)return[];for(var n=[],i=(1<<t+1)-1,o=0;o<r.length;++o)for(var a=r[o],u=i;u<1<<a.length;u=e.nextCombination(u)){for(var c=new Array(t+1),l=0,f=0;f<a.length;++f)u&1<<f&&(c[l++]=a[f]);n.push(c)}return s(n)}t.dimension=function(r){for(var t=0,n=Math.max,e=0,i=r.length;e<i;++e)t=n(t,r[e].length);return t-1},t.countVertices=function(r){for(var t=-1,n=Math.max,e=0,i=r.length;e<i;++e)for(var o=r[e],a=0,s=o.length;a<s;++a)t=n(t,o[a]);return t+1},t.cloneCells=function(r){for(var t=new Array(r.length),n=0,e=r.length;n<e;++n)t[n]=r[n].slice(0);return t},t.compareCells=o,t.normalize=s,t.unique=u,t.findCell=c,t.incidence=l,t.dual=function(r,t){if(!t)return l(u(f(r,0)),r);for(var n=new Array(t),e=0;e<t;++e)n[e]=[];e=0;for(var i=r.length;e<i;++e)for(var o=r[e],a=0,s=o.length;a<s;++a)n[o[a]].push(e);return n},t.explode=function(r){for(var t=[],n=0,e=r.length;n<e;++n)for(var i=r[n],o=0|i.length,a=1,u=1<<o;a<u;++a){for(var c=[],l=0;l<o;++l)a>>>l&1&&c.push(i[l]);t.push(c)}return s(t)},t.skeleton=f,t.boundary=function(r){for(var t=[],n=0,e=r.length;n<e;++n)for(var i=r[n],o=0,a=i.length;o<a;++o){for(var u=new Array(i.length-1),c=0,l=0;c<a;++c)c!==o&&(u[l++]=i[c]);t.push(u)}return s(t)},t.connectedComponents=function(r,t){return t?function(r,t){for(var n=new i(t),e=0;e<r.length;++e)for(var o=r[e],a=0;a<o.length;++a)for(var s=a+1;s<o.length;++s)n.link(o[a],o[s]);var u=[],c=n.ranks;for(e=0;e<c.length;++e)c[e]=-1;for(e=0;e<r.length;++e){var l=n.find(r[e][0]);c[l]<0?(c[l]=u.length,u.push([r[e].slice(0)])):u[c[l]].push(r[e].slice(0))}return u}(r,t):function(r){for(var t=u(s(f(r,0))),n=new i(t.length),e=0;e<r.length;++e)for(var o=r[e],a=0;a<o.length;++a)for(var l=c(t,[o[a]]),h=a+1;h<o.length;++h)n.link(l,c(t,[o[h]]));var v=[],p=n.ranks;for(e=0;e<p.length;++e)p[e]=-1;for(e=0;e<r.length;++e){var d=n.find(c(t,[r[e][0]]));p[d]<0?(p[d]=v.length,v.push([r[e].slice(0)])):v[p[d]].push(r[e].slice(0))}return v}(r)}},function(r,t,n){"use strict";"use restrict";function e(r){var t=32;return(r&=-r)&&t--,65535&r&&(t-=16),16711935&r&&(t-=8),252645135&r&&(t-=4),858993459&r&&(t-=2),1431655765&r&&(t-=1),t}t.INT_BITS=32,t.INT_MAX=2147483647,t.INT_MIN=-1<<31,t.sign=function(r){return(r>0)-(r<0)},t.abs=function(r){var t=r>>31;return(r^t)-t},t.min=function(r,t){return t^(r^t)&-(r<t)},t.max=function(r,t){return r^(r^t)&-(r<t)},t.isPow2=function(r){return!(r&r-1||!r)},t.log2=function(r){var t,n;return t=(r>65535)<<4,t|=n=((r>>>=t)>255)<<3,t|=n=((r>>>=n)>15)<<2,(t|=n=((r>>>=n)>3)<<1)|(r>>>=n)>>1},t.log10=function(r){return r>=1e9?9:r>=1e8?8:r>=1e7?7:r>=1e6?6:r>=1e5?5:r>=1e4?4:r>=1e3?3:r>=100?2:r>=10?1:0},t.popCount=function(r){return 16843009*((r=(858993459&(r-=r>>>1&1431655765))+(r>>>2&858993459))+(r>>>4)&252645135)>>>24},t.countTrailingZeros=e,t.nextPow2=function(r){return r+=0===r,--r,r|=r>>>1,r|=r>>>2,r|=r>>>4,r|=r>>>8,(r|=r>>>16)+1},t.prevPow2=function(r){return r|=r>>>1,r|=r>>>2,r|=r>>>4,r|=r>>>8,(r|=r>>>16)-(r>>>1)},t.parity=function(r){return r^=r>>>16,r^=r>>>8,r^=r>>>4,27030>>>(r&=15)&1};var i=new Array(256);!function(r){for(var t=0;t<256;++t){var n=t,e=t,i=7;for(n>>>=1;n;n>>>=1)e<<=1,e|=1&n,--i;r[t]=e<<i&255}}(i),t.reverse=function(r){return i[255&r]<<24|i[r>>>8&255]<<16|i[r>>>16&255]<<8|i[r>>>24&255]},t.interleave2=function(r,t){return(r=1431655765&((r=858993459&((r=252645135&((r=16711935&((r&=65535)|r<<8))|r<<4))|r<<2))|r<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t&=65535)|t<<8))|t<<4))|t<<2))|t<<1))<<1},t.deinterleave2=function(r,t){return(r=65535&((r=16711935&((r=252645135&((r=858993459&((r=r>>>t&1431655765)|r>>>1))|r>>>2))|r>>>4))|r>>>16))<<16>>16},t.interleave3=function(r,t,n){return r=1227133513&((r=3272356035&((r=251719695&((r=4278190335&((r&=1023)|r<<16))|r<<8))|r<<4))|r<<2),(r|=(t=1227133513&((t=3272356035&((t=251719695&((t=4278190335&((t&=1023)|t<<16))|t<<8))|t<<4))|t<<2))<<1)|(n=1227133513&((n=3272356035&((n=251719695&((n=4278190335&((n&=1023)|n<<16))|n<<8))|n<<4))|n<<2))<<2},t.deinterleave3=function(r,t){return(r=1023&((r=4278190335&((r=251719695&((r=3272356035&((r=r>>>t&1227133513)|r>>>2))|r>>>4))|r>>>8))|r>>>16))<<22>>22},t.nextCombination=function(r){var t=r|r-1;return t+1|(~t&-~t)-1>>>e(r)+1}},function(r,t,n){"use strict";"use restrict";function e(r){this.roots=new Array(r),this.ranks=new Array(r);for(var t=0;t<r;++t)this.roots[t]=t,this.ranks[t]=0}r.exports=e;var i=e.prototype;Object.defineProperty(i,"length",{get:function(){return this.roots.length}}),i.makeSet=function(){var r=this.roots.length;return this.roots.push(r),this.ranks.push(0),r},i.find=function(r){for(var t=r,n=this.roots;n[r]!==r;)r=n[r];for(;n[t]!==r;){var e=n[t];n[t]=r,t=e}return r},i.link=function(r,t){var n=this.find(r),e=this.find(t);if(n!==e){var i=this.ranks,o=this.roots,a=i[n],s=i[e];a<s?o[n]=e:s<a?o[e]=n:(o[e]=n,++i[n])}}},function(r,t,n){"use strict";r.exports=function(r){var t=r.length;if(0===t)return[];if(1===t)return[0];for(var n=r[0].length,e=[r[0]],o=[0],a=1;a<t;++a)if(e.push(r[a]),i(e,n)){if(o.push(a),o.length===n+1)return o}else e.pop();return o};var e=n(0);function i(r,t){for(var n=new Array(t+1),i=0;i<r.length;++i)n[i]=r[i];for(i=0;i<=r.length;++i){for(var o=r.length;o<=t;++o){for(var a=new Array(t),s=0;s<t;++s)a[s]=Math.pow(o+1-i,s);n[o]=a}if(e.apply(void 0,n))return!0}return!1}},function(r,t){(function(){var t=[].slice;r.exports=function(){var r,n,e;function i(r){var e,i,o;if(null==r)throw new Error("Argument required");if(!(r instanceof Array)||r.length<3)throw new Error("Array of vertices required");for(r[0],r[1],r[2],4<=r.length?t.call(r,3):[],i=0,o=r.length;i<o;i++){if(!((e=r[i])instanceof Array)||e.length<2)throw new Error("Invalid vertex");if(isNaN(e[0])||isNaN(e[1]))throw new Error("Invalid vertex")}n=r}return i.name="RotatingCalipers",n=null,r=function(r,t,n){return(n[1]-r[1])*(t[0]-r[0])-(n[0]-r[0])*(t[1]-r[1])},e=function(t,n,i){var o,a,s,u,c,l,f;for(s=null,a=0,u=[],l=0,f=t.length;l<f;l++)c=t[l],(o=r(n,i,c))>0&&(u.push(c),o<a||(a=o,s=c));return null==s?[i]:e(u,n,s).concat(e(u,s,i))},i.prototype.convexHull=function(){var r;return r=function(r){var t,n,e,i;for((n={}).min=n.max=r[0],e=0,i=r.length;e<i;e++)(t=r[e])[0]<n.min[0]&&(n.min=t),t[0]>n.max[0]&&(n.max=t);return n}(n),e(n,r.min,r.max).concat(e(n,r.max,r.min))},i.prototype.angleBetweenVectors=function(r,t){var n,e,i;return n=r[0]*t[0]+r[1]*t[1],e=Math.sqrt(r[0]*r[0]+r[1]*r[1]),i=Math.sqrt(t[0]*t[0]+t[1]*t[1]),Math.acos(n/(e*i))},i.prototype.rotateVector=function(r,t){var n;return(n=[])[0]=r[0]*Math.cos(t)-r[1]*Math.sin(t),n[1]=r[0]*Math.sin(t)+r[1]*Math.cos(t),n},i.prototype.shortestDistance=function(r,t,n){var e,i;return 0===n[0]?Math.abs(r[0]-t[0]):(e=n[1]/n[0],i=t[1]-e*t[0],Math.abs(r[1]-i-e*r[0])/Math.sqrt(e*e+1))},i.prototype.intersection=function(r,t,n,e){var i,o,a,s,u;return(0!==t[0]||0!==e[0])&&(0!==t[0]&&(a=t[1]/t[0],i=r[1]-a*r[0]),0!==e[0]&&(s=e[1]/e[0],o=n[1]-s*n[0]),0===t[0]?[r[0],s*r[0]+o]:0===e[0]?[n[0],a*n[0]+i]:a!==s&&((u=[])[0]=(o-i)/(a-s),u[1]=a*u[0]+i,u))},i.prototype.minAreaEnclosingRectangle=function(){var r,t,n,e,i,o,a,s,u,c,l,f,h,v,p,d,g,w,m,y,E;for(s=this.convexHull().reverse(),m=[0,0,0,0],o=function(r){return s[r%s.length]},i=function(r){var t,n;return t=o(r+1),n=o(r),[t[0]-n[0],t[1]-n[1]]},c=y=0,E=s.length;y<E;c=++y)(d=s[c])[1]<s[m[0]][1]&&(m[0]=c),d[1]>s[m[1]][1]&&(m[1]=c),d[0]<s[m[2]][0]&&(m[2]=c),d[0]>s[m[3]][0]&&(m[3]=c);for(g=0,f=p=h=null,e=[[1,0],[-1,0],[0,-1],[0,1]];g<Math.PI;){switch(r=function(){var r,t,n;for(n=[],u=r=0,t=m.length;r<t;u=++r)c=m[u],n.push(this.angleBetweenVectors(i(c),e[u]));return n}.call(this),l=Math.min.apply(Math,r),e=function(){var r,t,i;for(i=[],r=0,t=e.length;r<t;r++)n=e[r],i.push(this.rotateVector(n,l));return i}.call(this),c=r.indexOf(l)){case 0:case 2:w=this.shortestDistance(o(m[1]),o(m[0]),e[0]),a=this.shortestDistance(o(m[3]),o(m[2]),e[2]);break;case 1:w=this.shortestDistance(o(m[0]),o(m[1]),e[1]),a=this.shortestDistance(o(m[3]),o(m[2]),e[2]);break;case 3:w=this.shortestDistance(o(m[1]),o(m[0]),e[0]),a=this.shortestDistance(o(m[2]),o(m[3]),e[3])}g+=l,t=w*a,(null==f||t<f)&&(f=t,v=function(){var r,t;for(t=[],u=r=0;r<4;u=++r)t.push([o(m[u]),e[u]]);return t}(),p=w,h=a),m[c]++}return{vertices:[this.intersection(v[0][0],v[0][1],v[3][0],v[3][1]),this.intersection(v[3][0],v[3][1],v[1][0],v[1][1]),this.intersection(v[1][0],v[1][1],v[2][0],v[2][1]),this.intersection(v[2][0],v[2][1],v[0][0],v[0][1])],width:p,height:h,area:f}},i}()}).call(this)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,